<?php

namespace Tests\Feature;

use App\Models\Tenant;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use Tests\TestCase;

class TenantTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        \Artisan::call('passport:client --personal --name=revo');
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    /*public function test_example()
    {
        $response = $this->get('/');

        $response->assertStatus(200);
    }*/

    public function testUser(){
        dd(mockUser());
    }

    public function testGetTenants()
    {
        $result = app(TenantService::class)->getList();
        $this->assertInstanceOf(TenantCollection::class, $result);
    }


    public function testCreateTenant()
    {
        $this->actingAs(mockUser(), 'auth:api')
            ->json('post', 'http://localhost/api/test/tenant')
            ->assertJsonStructure([
                'name',
                'slug'
            ]);
    }

    public function testGetSingleTenant()
    {
        $tenantName = \Str::random(10);
        $tenant = Tenant::create(
            [
                'name' => $tenantName,
                'slug' => Str::slug($tenantName)
            ]
        );
        $result = app(TenantService::class)->showById($tenant->id);
        $this->assertEquals($tenant->id, $result->id);
    }

    public function getDeleteTenant()
    {
        $tenantName = \Str::random(10);
        $tenant = Tenant::create(
            [
                'name' => $tenantName,
                'slug' => Str::slug($tenantName)
            ]
        );
        $result = app(TenantService::class)->destroy($tenant->id);
        $this->assertTrue($result);
    }

    public function testDatabaseCreatedAfterTenantWasCreated(){
        $tenantName = \Str::random(10);
        $tenant = Tenant::create(
            [
                'name' => $tenantName,
                'slug' => Str::slug($tenantName)
            ]
        );
        $query = "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME =  ?";
        $db = DB::select($query, ['tenant_'.$tenant->id.'_db']);
        if (empty($db)) {
            $this->assertTrue(true);
        } else {
            $this->assertFalse(false);
        }
    }

}
