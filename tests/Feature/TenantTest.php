<?php

namespace Tests\Feature;

use App\Models\Tenant;
use Database\Factories\TenantFactory;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use Tests\CreatesApplication;
use Tests\TestCase;

class TenantTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('passport:client --personal --name=revo');
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */

    //index
    public function testGetTenants()
    {
        $user = mockUser();
        $data = [
            'name' => Str::random(10)
        ];

        $this->actingAs($user, 'api')
            ->withHeaders(['Accept'=>'application/json'])
            ->post('http://localhost/v1/company/tenants', $data)
            ->content();

        $this->actingAs($user, 'api')
            ->json('get', 'http://localhost/v1/company/tenants')
            ->assertJsonStructure([
                'data' => [
                    '*' => [
                         'name',
                          'slug'
                    ]
                ]
            ]);
        $this->artisan('migrate:fresh --env=testing');
    }


    //store
    public function testCreateTenant()
    {
        $user = mockUser();
        $data = [
            'name' => Str::random(10)
        ];

        $this->actingAs($user, 'api')
            ->withHeaders(['Accept'=>'application/json'])
            ->post('http://localhost/v1/company/tenants', $data)
            ->assertJsonStructure([
                'data' => [
                    'name',
                    'slug'
                ]
            ]);
        $this->artisan('migrate:fresh --env=testing');
    }

    //show
    public function testShowTenant()
    {
        $user = mockUser();
        $data = [
            'name' => Str::random(10)
        ];

        $tenant = $this->actingAs($user, 'api')
            ->withHeaders(['Accept'=>'application/json'])
            ->post('http://localhost/v1/company/tenants', $data)
            ->content();

        $this->actingAs($user, 'api')
            ->get('http://localhost/v1/company/tenants/'.json_decode($tenant)->data->id)
            ->assertJsonStructure([
                'data' => [
                    'name',
                    'slug'
                ]
            ]);

        $this->artisan('migrate:fresh --env=testing');
    }

    //update
    /*public function testUpdateTenant()
    {
        $user = mockUser();
        $data = [
            'name' => Str::random(10)
        ];

        $tenant = $this->actingAs($user, 'api')
            ->withHeaders(['Accept'=>'application/json'])
            ->post('http://localhost/v1/company/tenants', $data)
            ->content();

        $dataToUpdate = [
            'name' => Str::random(10),
        ];

        $updatedTenant = $this->actingAs($user, 'api')
            ->put('http://localhost/v1/company/tenants/'.json_decode($tenant)->data->id, $dataToUpdate)->content();

        $this->assertEquals($dataToUpdate['name'], json_decode($updatedTenant)->data->name);

        $this->artisan('migrate:fresh --env=testing');
    }*/

    //delete
    public function testDeleteTenant()
    {
        $user = mockUser();
        $data = [
            'name' => Str::random(10)
        ];

        $tenant = $this->actingAs($user, 'api')
            ->withHeaders(['Accept' => 'application/json'])
            ->post('http://localhost/v1/company/tenants', $data)
            ->content();


        $this->actingAs($user, 'api')
            ->delete('http://localhost/v1/company/tenants/' . json_decode($tenant)->data->id)
            ->assertSee('1')
            ->assertStatus(200);

        $this->artisan('migrate:fresh --env=testing');
    }

    public function testDatabaseCreatedAfterTenantWasCreated(){
        $user = mockUser();
        $data = [
            'name' => Str::random(10)
        ];

        $tenant = $this->actingAs($user, 'api')
            ->withHeaders(['Accept'=>'application/json'])
            ->post('http://localhost/v1/company/tenants', $data)
            ->content();

        $query = "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME =  ?";
        $db = DB::select($query, ['tenant_'.json_decode($tenant)->data->id.'_db']);
        if (empty($db)) {
            $this->assertTrue(true);
        } else {
            $this->assertFalse(false);
        }

        $this->artisan('migrate:fresh --env=testing');
    }

}
